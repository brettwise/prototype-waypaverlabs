extends layouts/h5bp.jade

block title
    title Navbar 

block content
    .container
      section
        p
          button#trigger-overlay(type='button') Open Overlay
        .overlay.overlay-hugeinc
          button.overlay-close(type='button') Close
          nav
            ul
              li
                a(href='#') Home
              li
                a(href='#') About
              li
                a(href='#') Work
              li
                a(href='#') Clients
              li
                a(href='#') Contact
    script.
      /*!
      * classie - class helper functions
      */
      /*jshint browser: true, strict: true, undef: true */
      /*global define: false */
      ( function( window ) {
      'use strict';
      // class helper functions from bonzo https://github.com/ded/bonzo
      function classReg( className ) {
      return new RegExp("(^|\\\s+)" + className + "(\\s+|$)");
      }
      // classList support for class management
      // altho to be fair, the api sucks because it won't accept multiple classes at once
      var hasClass, addClass, removeClass;
      if ( 'classList' in document.documentElement ) {
      hasClass = function( elem, c ) {
      return elem.classList.contains( c );
      };
      addClass = function( elem, c ) {
      elem.classList.add( c );
      };
      removeClass = function( elem, c ) {
      elem.classList.remove( c );
      };
      }
      else {
      hasClass = function( elem, c ) {
      return classReg( c ).test( elem.className );
      };
      addClass = function( elem, c ) {
      if ( !hasClass( elem, c ) ) {
      elem.className = elem.className + ' ' + c;
      }
      };
      removeClass = function( elem, c ) {
      elem.className = elem.className.replace( classReg( c ), ' ' );
      };
      }
      function toggleClass( elem, c ) {
      var fn = hasClass( elem, c ) ? removeClass : addClass;
      fn( elem, c );
      }
      var classie = {
      // full names
      hasClass: hasClass,
      addClass: addClass,
      removeClass: removeClass,
      toggleClass: toggleClass,
      // short names
      has: hasClass,
      add: addClass,
      remove: removeClass,
      toggle: toggleClass
      };
      // transport
      if ( typeof define === 'function' && define.amd ) {
      // AMD
      define( classie );
      } else {
      // browser global
      window.classie = classie;
      }
      })( window );
    script.
      (function() {
      var triggerBttn = document.getElementById( 'trigger-overlay' ),
      overlay = document.querySelector( 'div.overlay' ),
      closeBttn = overlay.querySelector( 'button.overlay-close' );
      transEndEventNames = {
      'WebkitTransition': 'webkitTransitionEnd',
      'MozTransition': 'transitionend',
      'OTransition': 'oTransitionEnd',
      'msTransition': 'MSTransitionEnd',
      'transition': 'transitionend'
      },
      transEndEventName = transEndEventNames[ Modernizr.prefixed( 'transition' ) ],
      support = { transitions : Modernizr.csstransitions };
      function toggleOverlay() {
      if( classie.has( overlay, 'open' ) ) {
      classie.remove( overlay, 'open' );
      classie.add( overlay, 'close' );
      var onEndTransitionFn = function( ev ) {
      if( support.transitions ) {
      if( ev.propertyName !== 'visibility' ) return;
      this.removeEventListener( transEndEventName, onEndTransitionFn );
      }
      classie.remove( overlay, 'close' );
      };
      if( support.transitions ) {
      overlay.addEventListener( transEndEventName, onEndTransitionFn );
      }
      else {
      onEndTransitionFn();
      }
      }
      else if( !classie.has( overlay, 'close' ) ) {
      classie.add( overlay, 'open' );
      }
      }
      triggerBttn.addEventListener( 'click', toggleOverlay );
      closeBttn.addEventListener( 'click', toggleOverlay );
      })();
